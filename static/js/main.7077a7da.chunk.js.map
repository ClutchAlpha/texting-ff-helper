{"version":3,"sources":["components/Header/AddUserDialog.tsx","components/Header/ChatUserSelect.tsx","components/Header/ChatCreatorSelect.tsx","components/Header/AddChatDialog.tsx","components/Header/UserListModal.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/DisplaySection/DisplaySection.tsx","components/ChatPages/UserSelect.tsx","components/ChatPages/SingleChat.tsx","components/ChatPages/ChatPages.tsx","components/BasePage/BasePage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddUserDialog","setTotalUsers","totalUsers","useState","userModalOpen","setUserModalOpen","newUserName","setNewUserName","className","onClick","Dialog","onClose","open","DialogTitle","DialogContent","TextField","onChange","event","target","value","placeholder","autoFocus","margin","id","label","fullWidth","variant","DialogActions","Button","newUserObject","name","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ChatUserSelect","groupUsers","setGroupUsers","useTheme","FormControl","sx","m","InputLabel","Select","labelId","multiple","split","input","OutlinedInput","renderValue","selected","Box","display","flexWrap","gap","map","Chip","user","MenuItem","ChatCreatorSelect","groupCreator","setGroupCreator","minWidth","AddChatDialog","chats","setChats","chatModalOpen","setChatModalOpen","groupName","setGroupName","userMap","reduce","acc","submitButtonEnabled","length","disabled","DialogContentText","newChat","users","creator","messages","text","UserListModal","userListModalOpen","setUserListModalOpen","List","userChats","filter","chat","x","includes","ListItem","ListItemText","primary","secondary","Header","title","Footer","DisplaySection","UserSelect","currentUser","setCurrentUser","chatUsers","SingleChat","currentMessage","setCurrentMessage","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","index","senderPrefix","sender","ref","onKeyPress","ev","key","preventDefault","ChatPages","BasePage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7077a7da.chunk.js","sourcesContent":["import React, {ChangeEvent, Dispatch, SetStateAction, useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {User} from \"../../types/utils\";\nimport './AddUserDialog.css'\n\ntype AddUserDialogProps = {\n  totalUsers: User[]\n  setTotalUsers: Dispatch<SetStateAction<User[]>>\n}\n\nconst AddUserDialog: React.FC<AddUserDialogProps> = ({\n                                                       setTotalUsers,\n                                                       totalUsers\n                                                     }) => {\n  \n  const [userModalOpen, setUserModalOpen] = useState<boolean>(false)\n  const [newUserName, setNewUserName] = useState<string>('')\n  \n  const handleChangeUserName = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewUserName(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    if (newUserName) {\n      const newUserObject: User = {name: newUserName}\n      setTotalUsers([...totalUsers, newUserObject])\n    }\n    setNewUserName('')\n    setUserModalOpen(false)\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserModalOpen(true)}\n      >\n        {'Add User'}\n      </button>\n      <Dialog onClose={() => setUserModalOpen(false)} open={userModalOpen} className={'addUserDialog'}>\n        <DialogTitle>\n          {'Add a new name to update the list of total users in the story!'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeUserName}\n            value={newUserName}\n            placeholder={'Add New Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"user\"\n            label=\"User Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSubmit}>\n            {'Submit'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default AddUserDialog","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatUserSelect.css'\nimport {User} from \"../../types/utils\";\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Theme, useTheme\n} from \"@mui/material\";\n\ntype ChatUserSelectProps = {\n  totalUsers: User[]\n  groupUsers: string[]\n  setGroupUsers: Dispatch<SetStateAction<string[]>>\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nconst ChatUserSelect: React.FC<ChatUserSelectProps> = ({totalUsers, groupUsers, setGroupUsers}) => {\n  const theme = useTheme();\n  \n  const handleChange = (event: SelectChangeEvent<typeof groupUsers>) => {\n    const value = event.target.value\n    setGroupUsers(typeof value === 'string' ? value.split(',') : value)\n  }\n  \n  return (\n    <FormControl sx={{ m: 1, width: 300 }}>\n      <InputLabel id=\"user-select-label\">Users</InputLabel>\n      <Select\n        labelId=\"user-select-label\"\n        id=\"user-select\"\n        multiple\n        value={groupUsers}\n        onChange={handleChange}\n        input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n        renderValue={(selected) => (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {selected.map((value) => (\n              <Chip key={value} label={value} />\n            ))}\n          </Box>\n        )}\n        MenuProps={MenuProps}\n      >\n        {totalUsers.map((user) => (\n          <MenuItem\n            key={user.name}\n            value={user.name}\n            style={getStyles(user.name, groupUsers, theme)}\n          >\n            {user.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatUserSelect\n\n","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatCreatorSelect.css'\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\n\ntype ChatCreatorSelectProps = {\n  groupCreator: string\n  setGroupCreator: Dispatch<SetStateAction<string>>\n  groupUsers: string[]\n}\n\nconst ChatCreatorSelect: React.FC<ChatCreatorSelectProps> = ({\n                                                               groupCreator,\n                                                               setGroupCreator,\n                                                               groupUsers\n                                                             }) => {\n  const handleGroupCreator = (event: SelectChangeEvent) => {\n    setGroupCreator(event.target.value as string)\n  }\n  \n  return (\n    <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n      <InputLabel id=\"group-creator-label\">Group Creator</InputLabel>\n      <Select\n        labelId=\"group-creator-label\"\n        id=\"group-creator\"\n        value={groupCreator}\n        onChange={handleGroupCreator}\n        label=\"Group Creator\"\n      >\n        {\n          groupUsers.map(user => (\n            <MenuItem key={user} value={user}>{user}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatCreatorSelect","import React, {ChangeEvent, Dispatch, SetStateAction, useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport './AddChatDialog.css'\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, TextField} from \"@mui/material\";\nimport ChatUserSelect from \"./ChatUserSelect\";\nimport ChatCreatorSelect from \"./ChatCreatorSelect\";\n\ntype AddChatDialogProps = {\n  chats: Chat[]\n  setChats: Dispatch<SetStateAction<Chat[]>>\n  totalUsers: User[]\n}\n\nconst AddChatDialog: React.FC<AddChatDialogProps> = ({\n                                                       chats,\n                                                       setChats,\n                                                       totalUsers\n                                                     }) => {\n  const [chatModalOpen, setChatModalOpen] = useState<boolean>(false)\n  const [groupUsers, setGroupUsers] = useState<string[]>([])\n  const [groupCreator, setGroupCreator] = useState<string>('')\n  const [groupName, setGroupName] = useState<string>('')\n  \n  const userMap: Record<string, User> = totalUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  \n  const handleChangeGroupName = (event: ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value)\n  }\n  \n  const handleCancel = () => {\n    setGroupCreator('')\n    setGroupName('')\n    setGroupUsers([])\n    setChatModalOpen(false)\n  }\n  \n  const handleSubmit = () => {\n    if (groupUsers.length > 0 && groupName && groupCreator){\n      const newChat: Chat = {\n        groupName,\n        users: groupUsers.map(name => userMap[name]),\n        creator: userMap[groupCreator],\n        messages: [\n          {text: `${groupName} created by ${groupCreator}`}\n        ]\n      }\n      setChats([\n        ...chats,\n        newChat\n      ])\n      setGroupCreator('')\n      setGroupName('')\n      setGroupUsers([])\n    }\n    \n    setChatModalOpen(false)\n  }\n  \n  const submitButtonEnabled: boolean = (\n    groupName !== '' && groupCreator !== '' && groupUsers.length > 0\n  )\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setChatModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'New Chat'}\n      </button>\n      <Dialog onClose={() => setChatModalOpen(false)} open={chatModalOpen} className={'addChatDialog'}>\n        <DialogContent className={'dialogContent'}>\n          <DialogContentText>\n            Add users, give it a name, and begin a new chat!\n          </DialogContentText>\n          <TextField\n            onChange={handleChangeGroupName}\n            value={groupName}\n            placeholder={'Set Group Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"group\"\n            label=\"Group Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n          <ChatUserSelect\n            totalUsers={totalUsers}\n            groupUsers={groupUsers}\n            setGroupUsers={setGroupUsers}\n          />\n          {\n            groupUsers.length > 0 &&\n            <ChatCreatorSelect\n              groupCreator={groupCreator}\n              setGroupCreator={setGroupCreator}\n              groupUsers={groupUsers}\n            />\n          }\n          \n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleSubmit}\n            disabled={!submitButtonEnabled}\n          >\n            {'Submit'}\n          </Button>\n          <Button onClick={handleCancel}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  \n  )\n}\n\nexport default AddChatDialog\n","import React, {useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport './UserListModal.css'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List, ListItem, ListItemText,\n} from \"@mui/material\";\n\ntype UserListModalProps = {\n  totalUsers: User[]\n  chats: Chat[]\n}\n\nconst UserListModal: React.FC<UserListModalProps> = ({totalUsers, chats}) => {\n  \n  const [userListModalOpen, setUserListModalOpen] = useState<boolean>(false)\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserListModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'See Total Users'}\n      </button>\n      <Dialog onClose={() => setUserListModalOpen(false)} open={userListModalOpen} className={'userListModal'}>\n        <DialogTitle>\n          {'All Users'}\n        </DialogTitle>\n        <DialogContent className={'dialogContent'}>\n          <List>\n            {\n              totalUsers.map(user => {\n                const userChats = chats.filter(chat => chat.users.map(x => x.name).includes(user.name)).length\n                return (\n                  <ListItem>\n                    <ListItemText\n                      primary={user.name}\n                      secondary={`Active user in ${userChats} chats`}\n                    />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setUserListModalOpen(false)}>\n            {'Close'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default UserListModal","import React, {Dispatch, SetStateAction} from 'react'\nimport './Header.css'\nimport {Chat, User} from \"../../types/utils\";\nimport AddUserDialog from \"./AddUserDialog\";\nimport AddChatDialog from \"./AddChatDialog\";\nimport UserListModal from \"./UserListModal\";\n\ntype HeaderProps = {\n  title?: string\n  chats: Chat[]\n  setChats: Dispatch<SetStateAction<Chat[]>>\n  totalUsers: User[]\n  setTotalUsers: Dispatch<SetStateAction<User[]>>\n}\n\nconst Header: React.FC<HeaderProps> = ({\n                                         title,\n                                         chats,\n                                         setChats,\n                                         totalUsers,\n                                         setTotalUsers\n                                       }) => {\n  \n  return (\n    <div className={'header'}>\n      {title || 'Header Here'}\n      <AddChatDialog\n        chats={chats}\n        setChats={setChats}\n        totalUsers={totalUsers}\n      />\n      <AddUserDialog\n        totalUsers={totalUsers}\n        setTotalUsers={setTotalUsers}\n      />\n      <UserListModal\n        totalUsers={totalUsers}\n        chats={chats}\n      />\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './Footer.css'\n\ntype FooterProps = {\n  title?: string;\n}\n\nconst Footer: React.FC<FooterProps> = ({title}) => {\n  return (\n    <div className={'footer'}>\n      {title || 'Footer Here'}\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport './DisplaySection.css'\n\ntype DisplaySectionProps = Record<string, string>\n\nconst DisplaySection: React.FC<DisplaySectionProps> = () => {\n  return (\n    <div className={'displaySection'}>\n      {'Display Section Here'}\n    </div>\n  )\n}\n\nexport default DisplaySection","import React, {Dispatch, SetStateAction} from 'react'\nimport './UserSelect.css'\nimport {User} from '../../types/utils';\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from '@mui/material';\n\ntype UserSelectProps = {\n  currentUser: User\n  setCurrentUser: Dispatch<SetStateAction<User>>\n  chatUsers: User[]\n}\n\nconst UserSelect: React.FC<UserSelectProps> = ({currentUser, setCurrentUser, chatUsers}) => {\n  const userMap: Record<string, User> = chatUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  const handleChangeUser = (event: SelectChangeEvent) => {\n    setCurrentUser(userMap[event.target.value as string])\n  }\n  \n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id='select-user-label'>\n          {'User'}\n        </InputLabel>\n        <Select\n          labelId='select-user-label'\n          id='select-user'\n          value={currentUser.name}\n          label='User'\n          onChange={handleChangeUser}\n        >\n          {\n            chatUsers.map(user => (\n                <MenuItem key={user.name} value={user.name}>\n                  {user.name}\n                </MenuItem>\n              )\n            )\n          }\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default UserSelect","import React, {ChangeEvent, useEffect, useRef, useState} from 'react'\nimport './SingleChat.css'\nimport {Chat, User} from \"../../types/utils\";\nimport UserSelect from \"./UserSelect\";\nimport {OutlinedInput} from \"@mui/material\";\n\ntype SingleChatProps = {\n  chat: Chat\n  totalUsers: User[]\n}\n\nconst SingleChat: React.FC<SingleChatProps> = ({chat, totalUsers}) => {\n  \n  const [currentUser, setCurrentUser] = useState<User>(chat.users[0])\n  const [currentMessage, setCurrentMessage] = useState<string>('')\n  \n  const handleUpdateMessage = (event: ChangeEvent<HTMLInputElement>) => {\n    setCurrentMessage(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    chat.messages = [\n      ...chat.messages,\n      {\n        text: currentMessage,\n        sender: currentUser\n      }\n    ]\n    \n    setCurrentMessage('')\n  }\n  \n  const messagesEndRef = useRef<null | HTMLDivElement>(null)\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({behavior: \"smooth\"})\n  }\n  \n  useEffect(scrollToBottom, [chat.messages.length]);\n  \n  \n  return (\n    <div className={'singleChat'}>\n      <div className={'groupName'}>\n        {chat.groupName}\n      </div>\n      <div className={'chatMessages'}>\n        {\n          chat.messages.map((x, index) => {\n            const senderPrefix = x.sender?.name ? `${x.sender.name}: ` : ''\n            return (\n              <div key={`${chat.groupName}-${index}`} className={'chatMessage'}>\n                {`${senderPrefix}${x.text}`}\n              </div>\n            );\n          })\n        }\n        <div ref={messagesEndRef}/>\n      </div>\n      <div className={'chatInputWrapper'}>\n        <OutlinedInput\n          placeholder=\"Message Here\"\n          value={currentMessage}\n          onChange={handleUpdateMessage}\n          onKeyPress={(ev) => {\n            if (ev.key === 'Enter') {\n              handleSubmit()\n              ev.preventDefault()\n            }\n          }}\n        />\n        <UserSelect\n          chatUsers={chat.users}\n          currentUser={currentUser}\n          setCurrentUser={setCurrentUser}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SingleChat","import React from 'react'\nimport './ChatPages.css'\nimport {Chat, User} from \"../../types/utils\";\nimport SingleChat from \"./SingleChat\";\n\ntype ChatPagesProps = {\n  chats: Chat[],\n  totalUsers: User[]\n}\n\nconst ChatPages: React.FC<ChatPagesProps> = ({chats, totalUsers}) => {\n  return (\n    <div className={'chatPages'}>\n      {\n        chats.length > 0\n          ? chats.map(chat => <SingleChat key={chat.groupName} chat={chat} totalUsers={totalUsers}/>)\n          : 'No Chats Available'\n      }\n    </div>\n  )\n}\n\nexport default ChatPages","import React from 'react'\nimport './BasePage.css'\nimport DisplaySection from \"../DisplaySection/DisplaySection\";\nimport ChatPages from \"../ChatPages/ChatPages\";\nimport {Chat, User} from \"../../types/utils\";\n\ntype BasePageProps = {\n  chats: Chat[]\n  totalUsers: User[]\n}\n\nconst BasePage: React.FC<BasePageProps> = ({chats, totalUsers}) => {\n  return (\n    <div className={'basePage'}>\n      <DisplaySection />\n      <ChatPages chats={chats} totalUsers={totalUsers}/>\n    </div>\n  )\n}\n\nexport default BasePage","import React, {useState} from 'react';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport Footer from \"./Footer/Footer\";\nimport BasePage from \"./BasePage/BasePage\";\nimport {Chat, User} from \"../types/utils\";\n\nfunction App() {\n  \n  const [chats, setChats] = useState<Chat[]>([])\n  const [totalUsers, setTotalUsers] = useState<User[]>([])\n  \n  return (\n    <div className={'App'}>\n      <Header\n        title={'Texing FF Helper'}\n        setChats={setChats}\n        chats={chats}\n        totalUsers={totalUsers}\n        setTotalUsers={setTotalUsers}\n      />\n      <BasePage\n        chats={chats}\n        totalUsers={totalUsers}\n      />\n      <Footer title={'Created by Yours Truly'}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}