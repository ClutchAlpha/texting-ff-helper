{"version":3,"sources":["constants/recoil.ts","recoil/users.ts","components/Header/AddUserDialog.tsx","components/Header/ChatUserSelect.tsx","components/Header/ChatCreatorSelect.tsx","recoil/chats.ts","components/Header/AddChatDialog.tsx","components/Header/UserListModal.tsx","utils/mongoUtils.ts","recoil/appUser.ts","components/Header/LoadDataDialog.tsx","components/Header/SaveDataDialog.tsx","components/Header/Header.tsx","components/DisplaySection/DisplaySection.tsx","components/ChatPages/UserSelect.tsx","components/ChatPages/MessageRow.tsx","components/ChatPages/SingleChat.tsx","components/ChatPages/ChatPages.tsx","components/BasePage/BasePage.tsx","components/Footer/Footer.tsx","components/AuthenticatedPage.tsx","components/UnauthenticatedPage/LoginSignupButtons.tsx","components/UnauthenticatedPage/LoginPanelHeader.tsx","components/UnauthenticatedPage/LoginSignupFormFields.tsx","components/UnauthenticatedPage/UnauthenticatedPage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["recoilKeys","usersState","atom","key","default","selector","get","length","AddUserDialog","useState","userModalOpen","setUserModalOpen","newUserName","setNewUserName","useRecoilState","totalUsers","setTotalUsers","className","onClick","Dialog","onClose","open","DialogTitle","DialogContent","TextField","onChange","event","target","value","placeholder","autoFocus","margin","id","label","fullWidth","variant","DialogActions","Button","newUserObject","name","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ChatUserSelect","groupUsers","setGroupUsers","useTheme","FormControl","sx","m","InputLabel","Select","labelId","multiple","split","input","OutlinedInput","renderValue","selected","Box","display","flexWrap","gap","map","Chip","user","MenuItem","ChatCreatorSelect","groupCreator","setGroupCreator","minWidth","chatsState","updateIndividualChatSelector","set","newValue","DefaultValue","currentChats","targetChat","indexOfNewChat","findIndex","x","groupName","slice","AddChatDialog","chatModalOpen","setChatModalOpen","setGroupName","useRecoilValue","chats","setChats","userMap","reduce","acc","submitButtonEnabled","disabled","DialogContentText","newChat","users","creator","messages","text","UserListModal","userListModalOpen","setUserListModalOpen","List","userChats","filter","chat","includes","ListItem","ListItemText","primary","secondary","MONGO_BASE_URL","getChapter","chapterId","userId","a","fetch","method","body","JSON","stringify","response","json","chapters","postChapter","appUser","_id","$oid","getUser","userName","hashPassword","password","pbkdf2Sync","toString","postUser","passwordHash","appUserState","undefined","LoadDataDialog","loadDataOpen","setLoadDataOpen","setChapterId","useSetRecoilState","then","chapter","SaveDataDialog","saveDataOpen","setSaveDataOpen","console","log","Header","title","DisplaySection","UserSelect","currentUser","setCurrentUser","chatUsers","MessageRow","alignment","message","index","leftOrRight","sender","senderPrefix","classNames","SingleChat","currentMessage","setCurrentMessage","updateIndividualChat","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","ref","onKeyPress","ev","preventDefault","ChatPages","BasePage","Footer","AuthenticatedPage","ColorButton","styled","backgroundColor","LoginSignupButtons","formState","setFormState","submitEnabled","handleSubmit","ToggleButtonGroup","exclusive","newFormState","ToggleButton","LoginPanelHeader","LoginSignupFormFields","setUserName","userNameValid","setPassword","passwordValid","setVerifyPassword","verifyPassword","verifyValid","Grid","container","direction","spacing","item","required","error","helperText","type","UnauthenticatedPage","setAltAppUser","clearFields","attemptSignup","checkUserResponse","userResponse","userJson","targetUser","attemptLogin","match","userNamePasswordComplete","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f615127c.chunk.js","sourcesContent":["export const recoilKeys = {\n  chatsState: 'chatsState',\n  numberOfChats: 'numberOfChats',\n  updateIndividualChatSelector: 'updateIndividualChatSelector',\n  \n  usersState: 'usersState',\n  numberOfUsers: 'numberOfUsers',\n  \n  appUserState: 'appUserState'\n}","import {atom, selector} from 'recoil'\nimport {recoilKeys} from \"../constants/recoil\";\nimport {User} from \"../types/utils\";\n\nexport const usersState = atom<User[]>({\n  key: recoilKeys.usersState,\n  default: []\n})\n\nexport const numberOfUsers = selector<number>({\n  key: recoilKeys.numberOfUsers,\n  get: ({get}) => {\n    const users = get(usersState)\n    return users.length\n  }\n})","import React, {ChangeEvent, useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {User} from \"../../types/utils\";\nimport './AddUserDialog.css'\nimport {useRecoilState} from \"recoil\";\nimport {usersState} from \"../../recoil/users\";\n\nconst AddUserDialog: React.FC = () => {\n  \n  const [userModalOpen, setUserModalOpen] = useState<boolean>(false)\n  const [newUserName, setNewUserName] = useState<string>('')\n  const [totalUsers, setTotalUsers] = useRecoilState(usersState)\n  \n  const handleChangeUserName = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewUserName(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    if (newUserName) {\n      const newUserObject: User = {name: newUserName}\n      setTotalUsers([...totalUsers, newUserObject])\n    }\n    setNewUserName('')\n    setUserModalOpen(false)\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserModalOpen(true)}\n      >\n        {'Add User'}\n      </button>\n      <Dialog onClose={() => setUserModalOpen(false)} open={userModalOpen} className={'addUserDialog'}>\n        <DialogTitle>\n          {'Add a new name to update the list of total users in the story!'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeUserName}\n            value={newUserName}\n            placeholder={'Add New Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"user\"\n            label=\"User Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSubmit}>\n            {'Submit'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default AddUserDialog","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatUserSelect.css'\nimport {User} from \"../../types/utils\";\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Theme, useTheme\n} from \"@mui/material\";\n\ntype ChatUserSelectProps = {\n  totalUsers: User[]\n  groupUsers: string[]\n  setGroupUsers: Dispatch<SetStateAction<string[]>>\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nconst ChatUserSelect: React.FC<ChatUserSelectProps> = ({totalUsers, groupUsers, setGroupUsers}) => {\n  const theme = useTheme();\n  \n  const handleChange = (event: SelectChangeEvent<typeof groupUsers>) => {\n    const value = event.target.value\n    setGroupUsers(typeof value === 'string' ? value.split(',') : value)\n  }\n  \n  return (\n    <FormControl sx={{ m: 1, width: 300 }}>\n      <InputLabel id=\"user-select-label\">Users</InputLabel>\n      <Select\n        labelId=\"user-select-label\"\n        id=\"user-select\"\n        multiple\n        value={groupUsers}\n        onChange={handleChange}\n        input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n        renderValue={(selected) => (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {selected.map((value) => (\n              <Chip key={value} label={value} />\n            ))}\n          </Box>\n        )}\n        MenuProps={MenuProps}\n      >\n        {totalUsers.map((user) => (\n          <MenuItem\n            key={user.name}\n            value={user.name}\n            style={getStyles(user.name, groupUsers, theme)}\n          >\n            {user.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatUserSelect\n\n","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatCreatorSelect.css'\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\n\ntype ChatCreatorSelectProps = {\n  groupCreator: string\n  setGroupCreator: Dispatch<SetStateAction<string>>\n  groupUsers: string[]\n}\n\nconst ChatCreatorSelect: React.FC<ChatCreatorSelectProps> = ({\n                                                               groupCreator,\n                                                               setGroupCreator,\n                                                               groupUsers\n                                                             }) => {\n  const handleGroupCreator = (event: SelectChangeEvent) => {\n    setGroupCreator(event.target.value as string)\n  }\n  \n  return (\n    <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n      <InputLabel id=\"group-creator-label\">Group Creator</InputLabel>\n      <Select\n        labelId=\"group-creator-label\"\n        id=\"group-creator\"\n        value={groupCreator}\n        onChange={handleGroupCreator}\n        label=\"Group Creator\"\n      >\n        {\n          groupUsers.map(user => (\n            <MenuItem key={user} value={user}>{user}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatCreatorSelect","import {atom, DefaultValue, selector} from \"recoil\";\nimport {recoilKeys} from \"../constants/recoil\";\nimport {Chat} from \"../types/utils\";\n\nexport const chatsState = atom<Chat[]>({\n  key: recoilKeys.chatsState,\n  default: [],\n})\n\nexport const numberOfChats = selector<number>({\n  key: recoilKeys.numberOfChats,\n  get: ({get}) => {\n    const chats = get(chatsState)\n    return chats.length\n  }\n})\n\nexport const updateIndividualChatSelector = selector<Chat[]>({\n  key: recoilKeys.updateIndividualChatSelector,\n  get: ({get}) => {\n    return get(chatsState)\n  },\n  set: ({set, get}, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      set(chatsState, newValue)\n    } else {\n      const currentChats = get(chatsState)\n      const targetChat = newValue[0]\n      const indexOfNewChat = currentChats.findIndex(x => x.groupName === targetChat.groupName)\n      set(chatsState,\n        [\n          ...currentChats.slice(0, indexOfNewChat),\n          targetChat,\n          ...currentChats.slice(indexOfNewChat + 1)\n        ])\n    }\n    \n  }\n})","import React, {ChangeEvent, useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport './AddChatDialog.css'\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, TextField} from \"@mui/material\";\nimport ChatUserSelect from \"./ChatUserSelect\";\nimport ChatCreatorSelect from \"./ChatCreatorSelect\";\nimport {useRecoilState, useRecoilValue} from \"recoil\";\nimport {usersState} from \"../../recoil/users\";\nimport {chatsState} from \"../../recoil/chats\";\n\nconst AddChatDialog: React.FC = () => {\n  const [chatModalOpen, setChatModalOpen] = useState<boolean>(false)\n  const [groupUsers, setGroupUsers] = useState<string[]>([])\n  const [groupCreator, setGroupCreator] = useState<string>('')\n  const [groupName, setGroupName] = useState<string>('')\n  \n  const totalUsers = useRecoilValue(usersState)\n  const [chats, setChats] = useRecoilState(chatsState)\n  \n  const userMap: Record<string, User> = totalUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  \n  const handleChangeGroupName = (event: ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value)\n  }\n  \n  const handleCancel = () => {\n    setGroupCreator('')\n    setGroupName('')\n    setGroupUsers([])\n    setChatModalOpen(false)\n  }\n  \n  const handleSubmit = () => {\n    if (groupUsers.length > 0 && groupName && groupCreator){\n      const newChat: Chat = {\n        groupName,\n        users: groupUsers.map(name => userMap[name]),\n        creator: userMap[groupCreator],\n        messages: [\n          {text: `${groupName} created by ${groupCreator}`}\n        ]\n      }\n      setChats([\n        ...chats,\n        newChat\n      ])\n      setGroupCreator('')\n      setGroupName('')\n      setGroupUsers([])\n    }\n    \n    setChatModalOpen(false)\n  }\n  \n  const submitButtonEnabled: boolean = (\n    groupName !== '' && groupCreator !== '' && groupUsers.length > 0\n  )\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setChatModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'New Chat'}\n      </button>\n      <Dialog onClose={() => setChatModalOpen(false)} open={chatModalOpen} className={'addChatDialog'}>\n        <DialogContent className={'dialogContent'}>\n          <DialogContentText>\n            Add users, give it a name, and begin a new chat!\n          </DialogContentText>\n          <TextField\n            onChange={handleChangeGroupName}\n            value={groupName}\n            placeholder={'Set Group Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"group\"\n            label=\"Group Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n          <ChatUserSelect\n            totalUsers={totalUsers}\n            groupUsers={groupUsers}\n            setGroupUsers={setGroupUsers}\n          />\n          {\n            groupUsers.length > 0 &&\n            <ChatCreatorSelect\n              groupCreator={groupCreator}\n              setGroupCreator={setGroupCreator}\n              groupUsers={groupUsers}\n            />\n          }\n          \n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleSubmit}\n            disabled={!submitButtonEnabled}\n          >\n            {'Submit'}\n          </Button>\n          <Button onClick={handleCancel}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  \n  )\n}\n\nexport default AddChatDialog\n","import React, {useState} from 'react'\nimport './UserListModal.css'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List, ListItem, ListItemText,\n} from \"@mui/material\";\nimport {useRecoilValue} from \"recoil\";\nimport {usersState} from \"../../recoil/users\";\nimport {chatsState} from \"../../recoil/chats\";\n\nconst UserListModal: React.FC = () => {\n  \n  const [userListModalOpen, setUserListModalOpen] = useState<boolean>(false)\n  const totalUsers = useRecoilValue(usersState)\n  const chats = useRecoilValue(chatsState)\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserListModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'See Total Users'}\n      </button>\n      <Dialog onClose={() => setUserListModalOpen(false)} open={userListModalOpen} className={'userListModal'}>\n        <DialogTitle>\n          {'All Users'}\n        </DialogTitle>\n        <DialogContent className={'dialogContent'}>\n          <List>\n            {\n              totalUsers.map(user => {\n                const userChats = chats.filter(chat => chat.users.map(x => x.name).includes(user.name)).length\n                return (\n                  <ListItem key={user.name}>\n                    <ListItemText\n                      key={user.name}\n                      primary={user.name}\n                      secondary={`Active user in ${userChats} chats`}\n                    />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setUserListModalOpen(false)}>\n            {'Close'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default UserListModal","import {ApplicationUser, Chat, User} from \"../types/utils\";\nimport {pbkdf2Sync} from 'crypto'\n\nconst MONGO_BASE_URL = 'https://us-east-1.aws.webhooks.mongodb-realm.com/api/client/v2.0/app/text-ff-backend-forai/service/data-retrieval/incoming_webhook'\n\nexport const getChapter = async (chapterId: string, userId: string) => {\n  if (chapterId && userId) {\n    const response = await fetch(\n      `${MONGO_BASE_URL}/get-chapter`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          chapterId,\n          userId\n        })\n      }\n    )\n    const json = await response.json()\n    return json.chapters || []\n  }\n}\n\nexport const postChapter = async (chapterId: string, appUser: ApplicationUser, users: User[], chats: Chat[]) => {\n  if (chapterId && users.length){\n    const response = await fetch(\n      `${MONGO_BASE_URL}/post-chapter`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          chapterId,\n          userId: appUser._id.$oid,\n          users,\n          chats\n        })\n      }\n    )\n    return await response.json()\n  }\n}\n\nexport const getUser = async (userName: string) => {\n  if (userName){\n    const response = await fetch(\n      `${MONGO_BASE_URL}/get-user`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          userName\n        })\n      }\n    )\n    return await response.json()\n  }\n}\n\nexport const hashPassword = (userName: string, password: string) => {\n  return pbkdf2Sync(password, `${userName}ff`, 100, 32, 'sha512')\n    .toString('hex')\n}\n\nexport const postUser = async (userName: string, password: string) => {\n  if (userName && password){\n    const passwordHash = hashPassword(userName, password)\n    \n    const response = await fetch(\n      `${MONGO_BASE_URL}/post-user`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          userName,\n          passwordHash\n        })\n      }\n    )\n\n    return await response.json()\n  }\n}","import {atom} from \"recoil\";\nimport {recoilKeys} from \"../constants/recoil\";\nimport {ApplicationUser} from \"../types/utils\";\n\nexport const appUserState = atom<ApplicationUser | undefined>({\n  key: recoilKeys.appUserState,\n  default: undefined\n})","import React, {ChangeEvent, useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {getChapter} from \"../../utils/mongoUtils\";\nimport {ChapterResponse} from \"../../types/mongoTypes\";\nimport './LoadDataDialog.css'\nimport {useRecoilValue, useSetRecoilState} from \"recoil\";\nimport {usersState} from \"../../recoil/users\";\nimport {chatsState} from \"../../recoil/chats\";\nimport {appUserState} from \"../../recoil/appUser\";\n\nconst LoadDataDialog: React.FC = () => {\n  const [loadDataOpen, setLoadDataOpen] = useState<boolean>(false)\n  const [chapterId, setChapterId] = useState<string>('')\n  const setTotalUsers = useSetRecoilState(usersState)\n  const setChats = useSetRecoilState(chatsState)\n  const appUser = useRecoilValue(appUserState)\n  \n  const handleChangeChapterId = (event: ChangeEvent<HTMLInputElement>) => {\n    setChapterId(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    if (appUser){\n      getChapter(chapterId, appUser._id.$oid)\n        .then((chapter: ChapterResponse[]) => {\n          if (chapter.length > 0) {\n            setTotalUsers(chapter[chapter.length - 1].users)\n            setChats(chapter[chapter.length - 1].chats)\n          }\n        })\n        .then(() => {\n          setChapterId('')\n          setLoadDataOpen(false)\n        })\n    }\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setLoadDataOpen(true)}\n      >\n        {'Load Data'}\n      </button>\n      <Dialog onClose={() => setLoadDataOpen(false)} open={loadDataOpen} className={'loadDataDialog'}>\n        <DialogTitle>\n          {'Type in Chapter Name to Load Data'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeChapterId}\n            value={chapterId}\n            placeholder={'Chapter Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"chapter\"\n            label=\"Chapter Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          {\n            chapterId &&\n            <Button onClick={handleSubmit}>\n              {'Load Data'}\n            </Button>\n          }\n          <Button onClick={() => setLoadDataOpen(false)}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default LoadDataDialog","import React, {ChangeEvent, useState} from 'react'\nimport './SaveDataDialog.css'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {postChapter} from \"../../utils/mongoUtils\";\nimport {useRecoilValue} from \"recoil\";\nimport {usersState} from \"../../recoil/users\";\nimport {chatsState} from \"../../recoil/chats\";\nimport {appUserState} from \"../../recoil/appUser\";\n\nconst SaveDataDialog: React.FC = () => {\n  const [saveDataOpen, setSaveDataOpen] = useState<boolean>(false)\n  const [chapterId, setChapterId] = useState<string>('')\n  const totalUsers = useRecoilValue(usersState)\n  const chats = useRecoilValue(chatsState)\n  const appUser = useRecoilValue(appUserState)\n  \n  const handleSubmit = () => {\n    if (appUser){\n      postChapter(chapterId, appUser, totalUsers, chats)\n        .then(response => {\n          console.log(response)\n        })\n        .then(() => {\n          setSaveDataOpen(false)\n        })\n    }\n  }\n  \n  const handleChangeChapterId = (event: ChangeEvent<HTMLInputElement>) => {\n    setChapterId(event.target.value)\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setSaveDataOpen(true)}\n      >\n        {'Save Data'}\n      </button>\n      <Dialog onClose={() => setSaveDataOpen(false)} open={saveDataOpen} className={'loadDataDialog'}>\n        <DialogTitle>\n          {'Fill in Chapter Name and Author to Save'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeChapterId}\n            value={chapterId}\n            placeholder={'Chapter Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"chapter\"\n            label=\"Chapter Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          {\n            chapterId &&\n            <Button onClick={handleSubmit}>\n              {'Load Data'}\n            </Button>\n          }\n          <Button onClick={() => setSaveDataOpen(false)}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default SaveDataDialog","import React from 'react'\nimport './Header.css'\nimport AddUserDialog from \"./AddUserDialog\";\nimport AddChatDialog from \"./AddChatDialog\";\nimport UserListModal from \"./UserListModal\";\nimport LoadDataDialog from \"./LoadDataDialog\";\nimport SaveDataDialog from \"./SaveDataDialog\";\n\ntype HeaderProps = {\n  title?: string\n}\n\nconst Header: React.FC<HeaderProps> = ({\n                                         title\n                                       }) => {\n  \n  return (\n    <div className={'header'}>\n      {title || 'Header Here'}\n      <AddChatDialog />\n      <AddUserDialog />\n      <UserListModal />\n      <LoadDataDialog />\n      <SaveDataDialog />\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './DisplaySection.css'\n\ntype DisplaySectionProps = Record<string, string>\n\nconst DisplaySection: React.FC<DisplaySectionProps> = () => {\n  return (\n    <div className={'displaySection'}>\n      {'Display Section Here'}\n    </div>\n  )\n}\n\nexport default DisplaySection","import React, {Dispatch, SetStateAction} from 'react'\nimport './UserSelect.css'\nimport {User} from '../../types/utils';\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from '@mui/material';\n\ntype UserSelectProps = {\n  currentUser: User\n  setCurrentUser: Dispatch<SetStateAction<User>>\n  chatUsers: User[]\n}\n\nconst UserSelect: React.FC<UserSelectProps> = ({currentUser, setCurrentUser, chatUsers}) => {\n  const userMap: Record<string, User> = chatUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  const handleChangeUser = (event: SelectChangeEvent) => {\n    setCurrentUser(userMap[event.target.value as string])\n  }\n  \n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id='select-user-label'>\n          {'User'}\n        </InputLabel>\n        <Select\n          labelId='select-user-label'\n          id='select-user'\n          value={currentUser.name}\n          label='User'\n          onChange={handleChangeUser}\n        >\n          {\n            chatUsers.map(user => (\n                <MenuItem key={user.name} value={user.name}>\n                  {user.name}\n                </MenuItem>\n              )\n            )\n          }\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default UserSelect","import React from 'react'\nimport './MessageRow.css'\nimport {Message, User} from \"../../types/utils\";\nimport classNames from \"classnames\";\n\ntype MessageRowProps = {\n  message: Message\n  index: number\n  chatUsers: User[]\n  groupName: string\n}\n\nconst MessageRow: React.FC<MessageRowProps> = ({message, index, chatUsers, groupName}) => {\n  const leftOrRight = chatUsers.findIndex(user => user.name === message.sender?.name) % 2 === 0\n  const senderPrefix = message.sender?.name ? `${message.sender.name}: ` : ''\n  let alignment\n  \n  if (!message.sender) {\n    alignment = 'centerMessage'\n  } else {\n    alignment = leftOrRight ? 'leftMessage' : 'rightMessage'\n  }\n  \n  return (\n    <div key={`${groupName}-${index}`} className={classNames('chatMessage', alignment)}>\n      <p className={alignment === 'centerMessage' ? 'special' : ''}>\n      {senderPrefix && <span className={'senderName'}>{`${senderPrefix}`}</span>}\n      {message.text}\n      </p>\n    </div>\n  );\n}\n\nexport default MessageRow","import React, {ChangeEvent, useEffect, useRef, useState} from 'react'\nimport './SingleChat.css'\nimport {Chat, User} from \"../../types/utils\";\nimport UserSelect from \"./UserSelect\";\nimport {OutlinedInput} from \"@mui/material\";\nimport MessageRow from \"./MessageRow\";\nimport { useSetRecoilState} from \"recoil\";\nimport { updateIndividualChatSelector} from \"../../recoil/chats\";\n\ntype SingleChatProps = {\n  chat: Chat\n}\n\nconst SingleChat: React.FC<SingleChatProps> = ({chat}) => {\n  \n  const [currentUser, setCurrentUser] = useState<User>(chat.users[0])\n  const [currentMessage, setCurrentMessage] = useState<string>('')\n  const updateIndividualChat = useSetRecoilState(updateIndividualChatSelector)\n  \n  const handleUpdateMessage = (event: ChangeEvent<HTMLInputElement>) => {\n    setCurrentMessage(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    updateIndividualChat(\n      [{\n        ...chat,\n        messages: [\n          ...chat.messages,\n          {\n            text: currentMessage,\n            sender: currentUser\n          }\n        ]\n      }]\n    )\n    \n    setCurrentMessage('')\n  }\n  \n  const messagesEndRef = useRef<null | HTMLDivElement>(null)\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({behavior: \"smooth\"})\n  }\n  \n  useEffect(scrollToBottom, [chat.messages.length]);\n  \n  return (\n    <div className={'singleChat'}>\n      <div className={'groupName'}>\n        {chat.groupName}\n      </div>\n      <div className={'chatMessages'}>\n        {\n          chat.messages.map((message, index) => {\n            return <MessageRow\n              key={index}\n              message={message}\n              index={index}\n              chatUsers={chat.users}\n              groupName={chat.groupName}\n            />\n          })\n        }\n        <div ref={messagesEndRef}/>\n      </div>\n      <div className={'chatInputWrapper'}>\n        <OutlinedInput\n          placeholder=\"Message Here\"\n          value={currentMessage}\n          onChange={handleUpdateMessage}\n          onKeyPress={(ev) => {\n            if (ev.key === 'Enter' && currentMessage) {\n              handleSubmit()\n              ev.preventDefault()\n            }\n          }}\n        />\n        <UserSelect\n          chatUsers={chat.users}\n          currentUser={currentUser}\n          setCurrentUser={setCurrentUser}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SingleChat","import React from 'react'\nimport './ChatPages.css'\nimport SingleChat from \"./SingleChat\";\nimport {useRecoilValue} from \"recoil\";\nimport {chatsState} from \"../../recoil/chats\";\n\nconst ChatPages: React.FC = () => {\n  const chats = useRecoilValue(chatsState)\n  \n  return (\n    <div className={'chatPages'}>\n      {\n        chats.length > 0\n          ? chats.map(chat => <SingleChat key={chat.groupName} chat={chat}/>)\n          : 'No Chats Available'\n      }\n    </div>\n  )\n}\n\nexport default ChatPages","import React from 'react'\nimport './BasePage.css'\nimport DisplaySection from \"../DisplaySection/DisplaySection\";\nimport ChatPages from \"../ChatPages/ChatPages\";\n\nconst BasePage: React.FC = () => {\n  return (\n    <div className={'basePage'}>\n      <DisplaySection />\n      <ChatPages/>\n    </div>\n  )\n}\n\nexport default BasePage","import React from 'react'\nimport './Footer.css'\n\ntype FooterProps = {\n  title?: string;\n}\n\nconst Footer: React.FC<FooterProps> = ({title}) => {\n  return (\n    <div className={'footer'}>\n      {title || 'Footer Here'}\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport Header from \"./Header/Header\";\nimport BasePage from \"./BasePage/BasePage\";\nimport Footer from \"./Footer/Footer\";\n\nconst AuthenticatedPage: React.FC = () => {\n  return (\n    <>\n      <Header title={'Texing FF Helper'} />\n      <BasePage/>\n      <Footer title={'Created by Yours Truly'}/>\n    </>\n  )\n}\n\nexport default AuthenticatedPage","import React, {Dispatch, SetStateAction} from 'react'\nimport {Button, ButtonProps, styled, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {FormState} from \"./UnauthenticatedPage\";\nimport './LoginSignupButtons.css'\n\nconst ColorButton = styled(Button)<ButtonProps>(() => ({\n  backgroundColor: '#8B0000',\n  '&:hover': {\n    backgroundColor: '#8B0000',\n  },\n}));\n\ntype LoginSignupButtonsProps = {\n  formState: FormState\n  setFormState: Dispatch<SetStateAction<FormState>>\n  handleSubmit: () => void,\n  submitEnabled: boolean\n}\n\nconst LoginSignupButtons: React.FC<LoginSignupButtonsProps> = ({\n                                                                 formState,\n                                                                 setFormState,\n                                                                 submitEnabled,\n                                                                 handleSubmit\n                                                               }) => {\n  \n  const handleUpdateFormState = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormState: FormState,\n  ) => {\n    setFormState(newFormState);\n  };\n  return (\n    <div className={'buttonWrapper'}>\n      <ToggleButtonGroup\n        value={formState}\n        exclusive\n        onChange={handleUpdateFormState}\n        aria-label=\"text alignment\"\n      >\n        <ToggleButton value=\"login\" aria-label=\"left aligned\">\n          {'Login'}\n        </ToggleButton>\n        <ToggleButton value=\"signup\" aria-label=\"centered\">\n          {'Sign Up'}\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <ColorButton\n        variant=\"contained\"\n        onClick={handleSubmit}\n        disabled={!submitEnabled}\n      >\n        {'Submit'}\n      </ColorButton>\n    </div>\n  )\n}\n\nexport default LoginSignupButtons","import React from 'react'\nimport './LoginPanelHeader.css'\n\nconst LoginPanelHeader: React.FC = () => {\n  return (\n    <div className={'titleWrapper'}>\n      <div className={'welcomeTitle'}>\n        {'Welcome to Text FF Helper'}\n      </div>\n      <div className={'secondaryText'}>\n        {'Login or Sign Up to Continue'}\n      </div>\n    </div>\n  )\n}\n\nexport default LoginPanelHeader","import React, {ChangeEvent, Dispatch, SetStateAction} from 'react'\nimport {FormState} from './UnauthenticatedPage';\nimport {Grid, TextField} from '@mui/material';\nimport './LoginSignupFormFields.css'\n\ntype LoginSignupFormFieldsProps = {\n  userNameValid: boolean\n  userName: string\n  setUserName: Dispatch<SetStateAction<string>>\n  passwordValid: boolean\n  password: string\n  setPassword: Dispatch<SetStateAction<string>>\n  verifyValid: boolean\n  verifyPassword: string\n  setVerifyPassword: Dispatch<SetStateAction<string>>\n  formState: FormState\n}\n\nconst LoginSignupFormFields: React.FC<LoginSignupFormFieldsProps> = ({\n                                                                       setUserName,\n                                                                       userName,\n                                                                       userNameValid,\n                                                                       setPassword,\n                                                                       password,\n                                                                       passwordValid,\n                                                                       setVerifyPassword,\n                                                                       verifyPassword,\n                                                                       verifyValid,\n                                                                       formState\n                                                                     }) => {\n  const handleChangeUsername = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserName(event.target.value)\n  }\n  \n  const handleChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value)\n  }\n  \n  const handleChangeVerifyPassword = (event: ChangeEvent<HTMLInputElement>) => {\n    setVerifyPassword(event.target.value)\n  }\n  \n  return (\n    <div className={'gridWrapper'}>\n      <Grid container direction={'column'} spacing={2}>\n        <Grid item>\n          <TextField\n            className={'loginSignupFormField'}\n            required\n            id={'outlined-required'}\n            value={userName}\n            label={'Required'}\n            error={!userNameValid}\n            helperText={userNameValid ? '' : 'Username must be alphanumeric, 5-25 characters'}\n            placeholder={'Enter Username'}\n            onChange={handleChangeUsername}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            className={'loginSignupFormField'}\n            type={'password'}\n            id={'password'}\n            label={'Password'}\n            value={password}\n            error={!passwordValid}\n            helperText={passwordValid ? '' : 'Password must be alphanumeric, 5-25 characters'}\n            placeholder={'Enter Password'}\n            onChange={handleChangePassword}\n          />\n        </Grid>\n        {\n          formState === 'signup' &&\n          <Grid item>\n            <TextField\n              className={'loginSignupFormField'}\n              type={'password'}\n              id={'verify-password'}\n              label={'Verify Password'}\n              value={verifyPassword}\n              error={!verifyValid}\n              helperText={verifyValid ? '' : 'Password do not match'}\n              placeholder={'Verify Password'}\n              onChange={handleChangeVerifyPassword}\n            />\n          </Grid>\n        }\n      </Grid>\n    </div>\n  )\n}\n\nexport default LoginSignupFormFields","import React, { useState} from 'react'\nimport './UnauthenticatedPage.css'\nimport {ApplicationUser} from \"../../types/utils\";\nimport LoginSignupButtons from \"./LoginSignupButtons\";\nimport LoginPanelHeader from \"./LoginPanelHeader\";\nimport LoginSignupFormFields from \"./LoginSignupFormFields\";\nimport {getUser, hashPassword, postUser} from \"../../utils/mongoUtils\";\nimport {appUserState} from \"../../recoil/appUser\";\nimport { useSetRecoilState} from \"recoil\";\n\nexport type FormState = 'login' | 'signup'\n\nconst UnauthenticatedPage: React.FC = () => {\n  \n  const setAltAppUser = useSetRecoilState(appUserState)\n  const [formState, setFormState] = useState<FormState>('login')\n  const [userName, setUserName] = useState<string>('')\n  const [password, setPassword] = useState<string>('')\n  const [verifyPassword, setVerifyPassword] = useState<string>('')\n  \n  const clearFields = () => {\n    setUserName('')\n    setPassword('')\n    setVerifyPassword('')\n  }\n  \n  const attemptSignup = async () => {\n    if (userName && password){\n      const checkUserResponse = await getUser(userName)\n      const users = checkUserResponse.users\n      if (users.length === 0){\n        await postUser(userName, password)\n        const userResponse = await getUser(userName)\n        const userJson = userResponse.json()\n        const targetUser = userJson.users[0]\n        setAltAppUser(targetUser)\n      }\n    }\n    clearFields()\n  }\n  \n  const attemptLogin = async () => {\n    const checkUserResponse = await getUser(userName)\n    const users = checkUserResponse.users\n    if (users.length > 0) {\n      const targetUser: ApplicationUser = users[0]\n      if (hashPassword(userName, password) === targetUser.passwordHash) {\n        setAltAppUser(targetUser)\n      }\n    }\n    clearFields()\n  }\n  \n  const handleSubmit = async () => {\n    if (formState === 'login') {\n      return await attemptLogin()\n    } else {\n      return await attemptSignup()\n    }\n  }\n  \n  const userNameValid = userName?.match(/^[A-Za-z]\\w{5,25}$/) !== null\n  const passwordValid = password?.match(/^[A-Za-z]\\w{5,25}$/) !== null\n  const verifyValid = password === verifyPassword\n  \n  const userNamePasswordComplete = userNameValid && passwordValid\n  \n  return (\n    <div className={'pageBackground'}>\n      <div className={'loginSignupForm'}>\n        <LoginPanelHeader/>\n        <LoginSignupFormFields\n          userName={userName}\n          password={password}\n          verifyPassword={verifyPassword}\n          userNameValid={userNameValid}\n          passwordValid={passwordValid}\n          verifyValid={verifyValid}\n          setUserName={setUserName}\n          setPassword={setPassword}\n          setVerifyPassword={setVerifyPassword}\n          formState={formState}\n        />\n        <LoginSignupButtons\n          submitEnabled={\n            formState === 'login'\n              ? userNamePasswordComplete\n              : userNamePasswordComplete && verifyValid\n          }\n          formState={formState}\n          setFormState={setFormState}\n          handleSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default UnauthenticatedPage","import React from 'react';\nimport './App.css';\nimport AuthenticatedPage from \"./AuthenticatedPage\";\nimport UnauthenticatedPage from \"./UnauthenticatedPage/UnauthenticatedPage\";\nimport {useRecoilState} from \"recoil\";\nimport {appUserState} from \"../recoil/appUser\";\n\nfunction App() {\n  \n  const [appUser] = useRecoilState(appUserState)\n  \n  return (\n    <div className={'App'}>\n      {\n        appUser\n          ? <AuthenticatedPage/>\n          : <UnauthenticatedPage/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport {RecoilRoot} from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App/>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}