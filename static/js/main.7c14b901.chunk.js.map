{"version":3,"sources":["constants/queries.ts","hooks/useFetchUserData.ts","components/Header/AddUserDialog.tsx","components/Header/ChatUserSelect.tsx","components/Header/ChatCreatorSelect.tsx","components/Header/AddChatDialog.tsx","components/Header/UserListModal.tsx","utils/mongoUtils.ts","components/Header/LoadDataDialog.tsx","components/Header/SaveDataDialog.tsx","components/Header/Header.tsx","components/DisplaySection/DisplaySection.tsx","components/ChatPages/UserSelect.tsx","components/ChatPages/MessageRow.tsx","components/ChatPages/SingleChat.tsx","components/ChatPages/ChatPages.tsx","components/BasePage/BasePage.tsx","components/Footer/Footer.tsx","components/AuthenticatedPage.tsx","components/UnauthenticatedPage/LoginSignupButtons.tsx","components/UnauthenticatedPage/LoginPanelHeader.tsx","components/UnauthenticatedPage/LoginSignupFormFields.tsx","components/UnauthenticatedPage/UnauthenticatedPage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["queryKeys","queryOptions","refetchOnMount","refetchOnReconnect","reftchOnWindowFocus","getUserData","userName","a","currentUser","undefined","userData","isAuthenticated","AddUserDialog","setTotalUsers","totalUsers","useState","userModalOpen","setUserModalOpen","newUserName","setNewUserName","className","onClick","Dialog","onClose","open","DialogTitle","DialogContent","TextField","onChange","event","target","value","placeholder","autoFocus","margin","id","label","fullWidth","variant","DialogActions","Button","newUserObject","name","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","ChatUserSelect","groupUsers","setGroupUsers","useTheme","FormControl","sx","m","InputLabel","Select","labelId","multiple","split","input","OutlinedInput","renderValue","selected","Box","display","flexWrap","gap","map","Chip","user","MenuItem","ChatCreatorSelect","groupCreator","setGroupCreator","minWidth","AddChatDialog","chats","setChats","chatModalOpen","setChatModalOpen","groupName","setGroupName","userMap","reduce","acc","submitButtonEnabled","length","disabled","DialogContentText","newChat","users","creator","messages","text","UserListModal","userListModalOpen","setUserListModalOpen","List","userChats","filter","chat","x","includes","ListItem","ListItemText","primary","secondary","MONGO_BASE_URL","getChapter","chapterId","fetch","method","body","JSON","stringify","response","json","chapters","postChapter","author","getUser","hashPassword","password","pbkdf2Sync","toString","postUser","passwordHash","LoadDataDialog","loadDataOpen","setLoadDataOpen","setChapterId","then","chapter","SaveDataDialog","saveDataOpen","setSaveDataOpen","setAuthor","console","log","Header","title","DisplaySection","UserSelect","setCurrentUser","chatUsers","MessageRow","alignment","message","index","leftOrRight","findIndex","sender","senderPrefix","classNames","SingleChat","currentMessage","setCurrentMessage","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","ref","onKeyPress","ev","key","preventDefault","ChatPages","BasePage","Footer","AuthenticatedPage","ColorButton","styled","backgroundColor","LoginSignupButtons","formState","setFormState","submitEnabled","handleSubmit","ToggleButtonGroup","exclusive","newFormState","ToggleButton","LoginPanelHeader","LoginSignupFormFields","setUserName","userNameValid","setPassword","passwordValid","setVerifyPassword","verifyPassword","verifyValid","Grid","container","direction","spacing","item","required","error","helperText","type","UnauthenticatedPage","setAppUser","clearFields","match","userNamePasswordComplete","userExists","App","appUser","useQuery","enabled","useFetchUserData","data","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.7c14b901.chunk.js","sourcesContent":["export const queryKeys = {\n  userData: 'userData'\n}\n\nexport const queryOptions = {\n  refetchOnMount: false,\n  refetchOnReconnect: false,\n  reftchOnWindowFocus: true\n}\n","import {useQuery} from \"react-query\";\nimport {queryKeys, queryOptions} from \"../constants/queries\";\nimport {ApplicationUser} from \"../types/utils\";\n\nconst getUserData = async (userName: ApplicationUser | undefined) => {\n  let currentUser = undefined\n  if (userName) {\n    currentUser = {userName: 'someUserName'} as ApplicationUser\n  }\n  \n  return {\n    userData: currentUser,\n    isAuthenticated: currentUser !== undefined\n  }\n}\n\nexport const useFetchUserData = (appUser: ApplicationUser | undefined) => {\n  return useQuery(\n    [queryKeys.userData, appUser],\n    () => getUserData(appUser),\n    {\n      ...queryOptions,\n      enabled: !!appUser\n    }\n  )\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {User} from \"../../types/utils\";\nimport './AddUserDialog.css'\n\ntype AddUserDialogProps = {\n  totalUsers: User[]\n  setTotalUsers: Dispatch<SetStateAction<User[]>>\n}\n\nconst AddUserDialog: React.FC<AddUserDialogProps> = ({\n                                                       setTotalUsers,\n                                                       totalUsers\n                                                     }) => {\n  \n  const [userModalOpen, setUserModalOpen] = useState<boolean>(false)\n  const [newUserName, setNewUserName] = useState<string>('')\n  \n  const handleChangeUserName = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewUserName(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    if (newUserName) {\n      const newUserObject: User = {name: newUserName}\n      setTotalUsers([...totalUsers, newUserObject])\n    }\n    setNewUserName('')\n    setUserModalOpen(false)\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserModalOpen(true)}\n      >\n        {'Add User'}\n      </button>\n      <Dialog onClose={() => setUserModalOpen(false)} open={userModalOpen} className={'addUserDialog'}>\n        <DialogTitle>\n          {'Add a new name to update the list of total users in the story!'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeUserName}\n            value={newUserName}\n            placeholder={'Add New Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"user\"\n            label=\"User Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleSubmit}>\n            {'Submit'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default AddUserDialog","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatUserSelect.css'\nimport {User} from \"../../types/utils\";\nimport {\n  Box,\n  Chip,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  SelectChangeEvent,\n  Theme, useTheme\n} from \"@mui/material\";\n\ntype ChatUserSelectProps = {\n  totalUsers: User[]\n  groupUsers: string[]\n  setGroupUsers: Dispatch<SetStateAction<string[]>>\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nconst ChatUserSelect: React.FC<ChatUserSelectProps> = ({totalUsers, groupUsers, setGroupUsers}) => {\n  const theme = useTheme();\n  \n  const handleChange = (event: SelectChangeEvent<typeof groupUsers>) => {\n    const value = event.target.value\n    setGroupUsers(typeof value === 'string' ? value.split(',') : value)\n  }\n  \n  return (\n    <FormControl sx={{ m: 1, width: 300 }}>\n      <InputLabel id=\"user-select-label\">Users</InputLabel>\n      <Select\n        labelId=\"user-select-label\"\n        id=\"user-select\"\n        multiple\n        value={groupUsers}\n        onChange={handleChange}\n        input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n        renderValue={(selected) => (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {selected.map((value) => (\n              <Chip key={value} label={value} />\n            ))}\n          </Box>\n        )}\n        MenuProps={MenuProps}\n      >\n        {totalUsers.map((user) => (\n          <MenuItem\n            key={user.name}\n            value={user.name}\n            style={getStyles(user.name, groupUsers, theme)}\n          >\n            {user.name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatUserSelect\n\n","import React, {Dispatch, SetStateAction} from 'react'\nimport './ChatCreatorSelect.css'\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\n\ntype ChatCreatorSelectProps = {\n  groupCreator: string\n  setGroupCreator: Dispatch<SetStateAction<string>>\n  groupUsers: string[]\n}\n\nconst ChatCreatorSelect: React.FC<ChatCreatorSelectProps> = ({\n                                                               groupCreator,\n                                                               setGroupCreator,\n                                                               groupUsers\n                                                             }) => {\n  const handleGroupCreator = (event: SelectChangeEvent) => {\n    setGroupCreator(event.target.value as string)\n  }\n  \n  return (\n    <FormControl variant=\"standard\" sx={{m: 1, minWidth: 120}}>\n      <InputLabel id=\"group-creator-label\">Group Creator</InputLabel>\n      <Select\n        labelId=\"group-creator-label\"\n        id=\"group-creator\"\n        value={groupCreator}\n        onChange={handleGroupCreator}\n        label=\"Group Creator\"\n      >\n        {\n          groupUsers.map(user => (\n            <MenuItem key={user} value={user}>{user}</MenuItem>\n          ))\n        }\n      </Select>\n    </FormControl>\n  )\n}\n\nexport default ChatCreatorSelect","import React, {ChangeEvent, Dispatch, SetStateAction, useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport './AddChatDialog.css'\nimport {Button, Dialog, DialogActions, DialogContent, DialogContentText, TextField} from \"@mui/material\";\nimport ChatUserSelect from \"./ChatUserSelect\";\nimport ChatCreatorSelect from \"./ChatCreatorSelect\";\n\ntype AddChatDialogProps = {\n  chats: Chat[]\n  setChats: Dispatch<SetStateAction<Chat[]>>\n  totalUsers: User[]\n}\n\nconst AddChatDialog: React.FC<AddChatDialogProps> = ({\n                                                       chats,\n                                                       setChats,\n                                                       totalUsers\n                                                     }) => {\n  const [chatModalOpen, setChatModalOpen] = useState<boolean>(false)\n  const [groupUsers, setGroupUsers] = useState<string[]>([])\n  const [groupCreator, setGroupCreator] = useState<string>('')\n  const [groupName, setGroupName] = useState<string>('')\n  \n  const userMap: Record<string, User> = totalUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  \n  const handleChangeGroupName = (event: ChangeEvent<HTMLInputElement>) => {\n    setGroupName(event.target.value)\n  }\n  \n  const handleCancel = () => {\n    setGroupCreator('')\n    setGroupName('')\n    setGroupUsers([])\n    setChatModalOpen(false)\n  }\n  \n  const handleSubmit = () => {\n    if (groupUsers.length > 0 && groupName && groupCreator){\n      const newChat: Chat = {\n        groupName,\n        users: groupUsers.map(name => userMap[name]),\n        creator: userMap[groupCreator],\n        messages: [\n          {text: `${groupName} created by ${groupCreator}`}\n        ]\n      }\n      setChats([\n        ...chats,\n        newChat\n      ])\n      setGroupCreator('')\n      setGroupName('')\n      setGroupUsers([])\n    }\n    \n    setChatModalOpen(false)\n  }\n  \n  const submitButtonEnabled: boolean = (\n    groupName !== '' && groupCreator !== '' && groupUsers.length > 0\n  )\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setChatModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'New Chat'}\n      </button>\n      <Dialog onClose={() => setChatModalOpen(false)} open={chatModalOpen} className={'addChatDialog'}>\n        <DialogContent className={'dialogContent'}>\n          <DialogContentText>\n            Add users, give it a name, and begin a new chat!\n          </DialogContentText>\n          <TextField\n            onChange={handleChangeGroupName}\n            value={groupName}\n            placeholder={'Set Group Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"group\"\n            label=\"Group Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n          <ChatUserSelect\n            totalUsers={totalUsers}\n            groupUsers={groupUsers}\n            setGroupUsers={setGroupUsers}\n          />\n          {\n            groupUsers.length > 0 &&\n            <ChatCreatorSelect\n              groupCreator={groupCreator}\n              setGroupCreator={setGroupCreator}\n              groupUsers={groupUsers}\n            />\n          }\n          \n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleSubmit}\n            disabled={!submitButtonEnabled}\n          >\n            {'Submit'}\n          </Button>\n          <Button onClick={handleCancel}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  \n  )\n}\n\nexport default AddChatDialog\n","import React, {useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport './UserListModal.css'\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List, ListItem, ListItemText,\n} from \"@mui/material\";\n\ntype UserListModalProps = {\n  totalUsers: User[]\n  chats: Chat[]\n}\n\nconst UserListModal: React.FC<UserListModalProps> = ({totalUsers, chats}) => {\n  \n  const [userListModalOpen, setUserListModalOpen] = useState<boolean>(false)\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setUserListModalOpen(true)}\n        disabled={totalUsers.length < 1}\n      >\n        {'See Total Users'}\n      </button>\n      <Dialog onClose={() => setUserListModalOpen(false)} open={userListModalOpen} className={'userListModal'}>\n        <DialogTitle>\n          {'All Users'}\n        </DialogTitle>\n        <DialogContent className={'dialogContent'}>\n          <List>\n            {\n              totalUsers.map(user => {\n                const userChats = chats.filter(chat => chat.users.map(x => x.name).includes(user.name)).length\n                return (\n                  <ListItem key={user.name}>\n                    <ListItemText\n                      primary={user.name}\n                      secondary={`Active user in ${userChats} chats`}\n                    />\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setUserListModalOpen(false)}>\n            {'Close'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default UserListModal","import {Chat, User} from \"../types/utils\";\nimport {pbkdf2Sync} from 'crypto'\n\nconst MONGO_BASE_URL = 'https://us-east-1.aws.webhooks.mongodb-realm.com/api/client/v2.0/app/text-ff-backend-forai/service/data-retrieval/incoming_webhook'\n\nexport const getChapter = async (chapterId: string) => {\n  if (chapterId) {\n    const response = await fetch(\n      `${MONGO_BASE_URL}/get-chapter`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          chapterId\n        })\n      }\n    )\n    const json = await response.json()\n    return json.chapters || []\n  }\n}\n\nexport const postChapter = async (chapterId: string, author: string, users: User[], chats: Chat[]) => {\n  if (chapterId && author && users.length){\n    const response = await fetch(\n      `${MONGO_BASE_URL}/post-chapter`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          chapterId,\n          author,\n          users,\n          chats\n        })\n      }\n    )\n    return await response.json()\n  }\n}\n\nexport const getUser = async (userName: string) => {\n  if (userName){\n    const response = await fetch(\n      `${MONGO_BASE_URL}/get-user`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          userName\n        })\n      }\n    )\n    return await response.json()\n  }\n}\n\nexport const hashPassword = (userName: string, password: string) => {\n  return pbkdf2Sync(password, `${userName}ff`, 100, 32, 'sha512')\n    .toString('hex')\n}\n\nexport const postUser = async (userName: string, password: string) => {\n  if (userName && password){\n    const passwordHash = hashPassword(userName, password)\n    \n    const response = await fetch(\n      `${MONGO_BASE_URL}/post-user`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          userName,\n          passwordHash\n        })\n      }\n    )\n\n    return await response.json()\n  }\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useState} from 'react'\nimport {Chat, User} from \"../../types/utils\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {getChapter} from \"../../utils/mongoUtils\";\nimport {ChapterResponse} from \"../../types/mongoTypes\";\nimport './LoadDataDialog.css'\n\ntype LoadDataDialogProps = {\n  setTotalUsers: Dispatch<SetStateAction<User[]>>\n  setChats: Dispatch<SetStateAction<Chat[]>>\n}\n\nconst LoadDataDialog: React.FC<LoadDataDialogProps> = ({\n                                                         setTotalUsers,\n                                                         setChats\n                                                       }) => {\n  const [loadDataOpen, setLoadDataOpen] = useState<boolean>(false)\n  const [chapterId, setChapterId] = useState<string>('')\n  \n  const handleChangeChapterId = (event: ChangeEvent<HTMLInputElement>) => {\n    setChapterId(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    getChapter(chapterId)\n      .then((chapter: ChapterResponse[]) => {\n        if (chapter.length > 0) {\n          setTotalUsers(chapter[chapter.length - 1].users)\n          setChats(chapter[chapter.length - 1].chats)\n        }\n      })\n      .then(() => {\n        setChapterId('')\n        setLoadDataOpen(false)\n      })\n  }\n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setLoadDataOpen(true)}\n      >\n        {'Load Data'}\n      </button>\n      <Dialog onClose={() => setLoadDataOpen(false)} open={loadDataOpen} className={'loadDataDialog'}>\n        <DialogTitle>\n          {'Type in Chapter Name to Load Data'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeChapterId}\n            value={chapterId}\n            placeholder={'Chapter Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"chapter\"\n            label=\"Chapter Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          {\n            chapterId &&\n            <Button onClick={handleSubmit}>\n              {'Load Data'}\n            </Button>\n          }\n          <Button onClick={() => setLoadDataOpen(false)}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default LoadDataDialog","import React, {ChangeEvent, useState} from 'react'\nimport './SaveDataDialog.css'\nimport {Chat, User} from \"../../types/utils\";\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\nimport {postChapter} from \"../../utils/mongoUtils\";\n\ntype SaveDataDialogProps = {\n  totalUsers: User[]\n  chats: Chat[]\n}\n\nconst SaveDataDialog: React.FC<SaveDataDialogProps> = ({\n  totalUsers,\n  chats\n}) => {\n  const [saveDataOpen, setSaveDataOpen] = useState<boolean>(false)\n  const [chapterId, setChapterId] = useState<string>('')\n  const [author, setAuthor] = useState<string>('')\n  \n  const handleSubmit = () => {\n    postChapter(chapterId, author, totalUsers, chats)\n      .then(response => {\n        console.log(response)\n      })\n      .then(() => {\n        setChapterId('')\n        setAuthor('')\n        setSaveDataOpen(false)\n      })\n  }\n  \n  const handleChangeChapterId = (event: ChangeEvent<HTMLInputElement>) => {\n    setChapterId(event.target.value)\n  }\n  \n  const handleChangeAuthor = (event: ChangeEvent<HTMLInputElement>) => {\n    setAuthor(event.target.value)\n  }\n  \n  \n  return (\n    <>\n      <button\n        className={'addButton'}\n        onClick={() => setSaveDataOpen(true)}\n      >\n        {'Save Data'}\n      </button>\n      <Dialog onClose={() => setSaveDataOpen(false)} open={saveDataOpen} className={'loadDataDialog'}>\n        <DialogTitle>\n          {'Fill in Chapter Name and Author to Save'}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            onChange={handleChangeChapterId}\n            value={chapterId}\n            placeholder={'Chapter Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"chapter\"\n            label=\"Chapter Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n          <TextField\n            onChange={handleChangeAuthor}\n            value={author}\n            placeholder={'Author Name Here'}\n            autoFocus\n            margin=\"dense\"\n            id=\"author\"\n            label=\"Author Name\"\n            fullWidth\n            variant=\"standard\"\n          />\n        </DialogContent>\n        <DialogActions>\n          {\n            chapterId && author &&\n            <Button onClick={handleSubmit}>\n              {'Load Data'}\n            </Button>\n          }\n          <Button onClick={() => setSaveDataOpen(false)}>\n            {'Cancel'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}\n\nexport default SaveDataDialog","import React, {Dispatch, SetStateAction} from 'react'\nimport './Header.css'\nimport {Chat, User} from \"../../types/utils\";\nimport AddUserDialog from \"./AddUserDialog\";\nimport AddChatDialog from \"./AddChatDialog\";\nimport UserListModal from \"./UserListModal\";\nimport LoadDataDialog from \"./LoadDataDialog\";\nimport SaveDataDialog from \"./SaveDataDialog\";\n\ntype HeaderProps = {\n  title?: string\n  chats: Chat[]\n  setChats: Dispatch<SetStateAction<Chat[]>>\n  totalUsers: User[]\n  setTotalUsers: Dispatch<SetStateAction<User[]>>\n}\n\nconst Header: React.FC<HeaderProps> = ({\n                                         title,\n                                         chats,\n                                         setChats,\n                                         totalUsers,\n                                         setTotalUsers\n                                       }) => {\n  \n  return (\n    <div className={'header'}>\n      {title || 'Header Here'}\n      <AddChatDialog\n        chats={chats}\n        setChats={setChats}\n        totalUsers={totalUsers}\n      />\n      <AddUserDialog\n        totalUsers={totalUsers}\n        setTotalUsers={setTotalUsers}\n      />\n      <UserListModal\n        totalUsers={totalUsers}\n        chats={chats}\n      />\n      <LoadDataDialog\n        setChats={setChats}\n        setTotalUsers={setTotalUsers}\n      />\n      <SaveDataDialog\n        totalUsers={totalUsers}\n        chats={chats}\n      />\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './DisplaySection.css'\n\ntype DisplaySectionProps = Record<string, string>\n\nconst DisplaySection: React.FC<DisplaySectionProps> = () => {\n  return (\n    <div className={'displaySection'}>\n      {'Display Section Here'}\n    </div>\n  )\n}\n\nexport default DisplaySection","import React, {Dispatch, SetStateAction} from 'react'\nimport './UserSelect.css'\nimport {User} from '../../types/utils';\nimport {FormControl, InputLabel, MenuItem, Select, SelectChangeEvent} from '@mui/material';\n\ntype UserSelectProps = {\n  currentUser: User\n  setCurrentUser: Dispatch<SetStateAction<User>>\n  chatUsers: User[]\n}\n\nconst UserSelect: React.FC<UserSelectProps> = ({currentUser, setCurrentUser, chatUsers}) => {\n  const userMap: Record<string, User> = chatUsers.reduce((acc, user) => ({ ...acc, [user.name]: user}), {})\n  const handleChangeUser = (event: SelectChangeEvent) => {\n    setCurrentUser(userMap[event.target.value as string])\n  }\n  \n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id='select-user-label'>\n          {'User'}\n        </InputLabel>\n        <Select\n          labelId='select-user-label'\n          id='select-user'\n          value={currentUser.name}\n          label='User'\n          onChange={handleChangeUser}\n        >\n          {\n            chatUsers.map(user => (\n                <MenuItem key={user.name} value={user.name}>\n                  {user.name}\n                </MenuItem>\n              )\n            )\n          }\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default UserSelect","import React from 'react'\nimport './MessageRow.css'\nimport {Message, User} from \"../../types/utils\";\nimport classNames from \"classnames\";\n\ntype MessageRowProps = {\n  message: Message\n  index: number\n  chatUsers: User[]\n  groupName: string\n}\n\nconst MessageRow: React.FC<MessageRowProps> = ({message, index, chatUsers, groupName}) => {\n  const leftOrRight = chatUsers.findIndex(user => user.name === message.sender?.name) % 2 === 0\n  const senderPrefix = message.sender?.name ? `${message.sender.name}: ` : ''\n  let alignment\n  \n  if (!message.sender) {\n    alignment = 'centerMessage'\n  } else {\n    alignment = leftOrRight ? 'leftMessage' : 'rightMessage'\n  }\n  \n  return (\n    <div key={`${groupName}-${index}`} className={classNames('chatMessage', alignment)}>\n      <p className={alignment === 'centerMessage' ? 'special' : ''}>\n      {senderPrefix && <span className={'senderName'}>{`${senderPrefix}`}</span>}\n      {message.text}\n      </p>\n    </div>\n  );\n}\n\nexport default MessageRow","import React, {ChangeEvent, useEffect, useRef, useState} from 'react'\nimport './SingleChat.css'\nimport {Chat, User} from \"../../types/utils\";\nimport UserSelect from \"./UserSelect\";\nimport {OutlinedInput} from \"@mui/material\";\nimport MessageRow from \"./MessageRow\";\n\ntype SingleChatProps = {\n  chat: Chat\n  totalUsers: User[]\n}\n\nconst SingleChat: React.FC<SingleChatProps> = ({chat, totalUsers}) => {\n  \n  const [currentUser, setCurrentUser] = useState<User>(chat.users[0])\n  const [currentMessage, setCurrentMessage] = useState<string>('')\n  \n  const handleUpdateMessage = (event: ChangeEvent<HTMLInputElement>) => {\n    setCurrentMessage(event.target.value)\n  }\n  \n  const handleSubmit = () => {\n    chat.messages = [\n      ...chat.messages,\n      {\n        text: currentMessage,\n        sender: currentUser\n      }\n    ]\n    \n    setCurrentMessage('')\n  }\n  \n  const messagesEndRef = useRef<null | HTMLDivElement>(null)\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({behavior: \"smooth\"})\n  }\n  \n  useEffect(scrollToBottom, [chat.messages.length]);\n  \n  return (\n    <div className={'singleChat'}>\n      <div className={'groupName'}>\n        {chat.groupName}\n      </div>\n      <div className={'chatMessages'}>\n        {\n          chat.messages.map((message, index) => {\n            return <MessageRow\n              message={message}\n              index={index}\n              chatUsers={chat.users}\n              groupName={chat.groupName}\n            />\n          })\n        }\n        <div ref={messagesEndRef}/>\n      </div>\n      <div className={'chatInputWrapper'}>\n        <OutlinedInput\n          placeholder=\"Message Here\"\n          value={currentMessage}\n          onChange={handleUpdateMessage}\n          onKeyPress={(ev) => {\n            if (ev.key === 'Enter') {\n              handleSubmit()\n              ev.preventDefault()\n            }\n          }}\n        />\n        <UserSelect\n          chatUsers={chat.users}\n          currentUser={currentUser}\n          setCurrentUser={setCurrentUser}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SingleChat","import React from 'react'\nimport './ChatPages.css'\nimport {Chat, User} from \"../../types/utils\";\nimport SingleChat from \"./SingleChat\";\n\ntype ChatPagesProps = {\n  chats: Chat[],\n  totalUsers: User[]\n}\n\nconst ChatPages: React.FC<ChatPagesProps> = ({chats, totalUsers}) => {\n  return (\n    <div className={'chatPages'}>\n      {\n        chats.length > 0\n          ? chats.map(chat => <SingleChat key={chat.groupName} chat={chat} totalUsers={totalUsers}/>)\n          : 'No Chats Available'\n      }\n    </div>\n  )\n}\n\nexport default ChatPages","import React from 'react'\nimport './BasePage.css'\nimport DisplaySection from \"../DisplaySection/DisplaySection\";\nimport ChatPages from \"../ChatPages/ChatPages\";\nimport {Chat, User} from \"../../types/utils\";\n\ntype BasePageProps = {\n  chats: Chat[]\n  totalUsers: User[]\n}\n\nconst BasePage: React.FC<BasePageProps> = ({chats, totalUsers}) => {\n  return (\n    <div className={'basePage'}>\n      <DisplaySection />\n      <ChatPages chats={chats} totalUsers={totalUsers}/>\n    </div>\n  )\n}\n\nexport default BasePage","import React from 'react'\nimport './Footer.css'\n\ntype FooterProps = {\n  title?: string;\n}\n\nconst Footer: React.FC<FooterProps> = ({title}) => {\n  return (\n    <div className={'footer'}>\n      {title || 'Footer Here'}\n    </div>\n  )\n}\n\nexport default Footer\n","import React, {useState} from 'react'\nimport Header from \"./Header/Header\";\nimport BasePage from \"./BasePage/BasePage\";\nimport Footer from \"./Footer/Footer\";\nimport {Chat, User} from \"../types/utils\";\n\nconst AuthenticatedPage: React.FC = () => {\n  const [chats, setChats] = useState<Chat[]>([])\n  const [totalUsers, setTotalUsers] = useState<User[]>([])\n  return (\n    <>\n      <Header\n        title={'Texing FF Helper'}\n        setChats={setChats}\n        chats={chats}\n        totalUsers={totalUsers}\n        setTotalUsers={setTotalUsers}\n      />\n      <BasePage\n        chats={chats}\n        totalUsers={totalUsers}\n      />\n      <Footer title={'Created by Yours Truly'}/>\n    </>\n  )\n}\n\nexport default AuthenticatedPage","import React, {Dispatch, SetStateAction} from 'react'\nimport {Button, ButtonProps, styled, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {FormState} from \"./UnauthenticatedPage\";\nimport './LoginSignupButtons.css'\n\nconst ColorButton = styled(Button)<ButtonProps>(() => ({\n  backgroundColor: '#8B0000',\n  '&:hover': {\n    backgroundColor: '#8B0000',\n  },\n}));\n\ntype LoginSignupButtonsProps = {\n  formState: FormState\n  setFormState: Dispatch<SetStateAction<FormState>>\n  handleSubmit: () => void,\n  submitEnabled: boolean\n}\n\nconst LoginSignupButtons: React.FC<LoginSignupButtonsProps> = ({\n                                                                 formState,\n                                                                 setFormState,\n                                                                 submitEnabled,\n                                                                 handleSubmit\n                                                               }) => {\n  \n  const handleUpdateFormState = (\n    event: React.MouseEvent<HTMLElement>,\n    newFormState: FormState,\n  ) => {\n    setFormState(newFormState);\n  };\n  return (\n    <div className={'buttonWrapper'}>\n      <ToggleButtonGroup\n        value={formState}\n        exclusive\n        onChange={handleUpdateFormState}\n        aria-label=\"text alignment\"\n      >\n        <ToggleButton value=\"login\" aria-label=\"left aligned\">\n          {'Login'}\n        </ToggleButton>\n        <ToggleButton value=\"signup\" aria-label=\"centered\">\n          {'Sign Up'}\n        </ToggleButton>\n      </ToggleButtonGroup>\n      <ColorButton\n        variant=\"contained\"\n        onClick={handleSubmit}\n        disabled={!submitEnabled}\n      >\n        {'Submit'}\n      </ColorButton>\n    </div>\n  )\n}\n\nexport default LoginSignupButtons","import React from 'react'\nimport './LoginPanelHeader.css'\n\nconst LoginPanelHeader: React.FC = () => {\n  return (\n    <div className={'titleWrapper'}>\n      <div className={'welcomeTitle'}>\n        {'Welcome to Text FF Helper'}\n      </div>\n      <div className={'secondaryText'}>\n        {'Login or Sign Up to Continue'}\n      </div>\n    </div>\n  )\n}\n\nexport default LoginPanelHeader","import React, {ChangeEvent, Dispatch, SetStateAction} from 'react'\nimport {FormState} from './UnauthenticatedPage';\nimport {Grid, TextField} from '@mui/material';\nimport './LoginSignupFormFields.css'\n\ntype LoginSignupFormFieldsProps = {\n  userNameValid: boolean\n  userName: string\n  setUserName: Dispatch<SetStateAction<string>>\n  passwordValid: boolean\n  password: string\n  setPassword: Dispatch<SetStateAction<string>>\n  verifyValid: boolean\n  verifyPassword: string\n  setVerifyPassword: Dispatch<SetStateAction<string>>\n  formState: FormState\n}\n\nconst LoginSignupFormFields: React.FC<LoginSignupFormFieldsProps> = ({\n                                                                       setUserName,\n                                                                       userName,\n                                                                       userNameValid,\n                                                                       setPassword,\n                                                                       password,\n                                                                       passwordValid,\n                                                                       setVerifyPassword,\n                                                                       verifyPassword,\n                                                                       verifyValid,\n                                                                       formState\n                                                                     }) => {\n  const handleChangeUsername = (event: ChangeEvent<HTMLInputElement>) => {\n    setUserName(event.target.value)\n  }\n  \n  const handleChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value)\n  }\n  \n  const handleChangeVerifyPassword = (event: ChangeEvent<HTMLInputElement>) => {\n    setVerifyPassword(event.target.value)\n  }\n  \n  return (\n    <div className={'gridWrapper'}>\n      <Grid container direction={'column'} spacing={2}>\n        <Grid item>\n          <TextField\n            className={'loginSignupFormField'}\n            required\n            id={'outlined-required'}\n            value={userName}\n            label={'Required'}\n            error={!userNameValid}\n            helperText={userNameValid ? '' : 'Username must be alphanumeric, 5-25 characters'}\n            placeholder={'Enter Username'}\n            onChange={handleChangeUsername}\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            className={'loginSignupFormField'}\n            type={'password'}\n            id={'password'}\n            label={'Password'}\n            value={password}\n            error={!passwordValid}\n            helperText={passwordValid ? '' : 'Password must be alphanumeric, 5-25 characters'}\n            placeholder={'Enter Password'}\n            onChange={handleChangePassword}\n          />\n        </Grid>\n        {\n          formState === 'signup' &&\n          <Grid item>\n            <TextField\n              className={'loginSignupFormField'}\n              type={'password'}\n              id={'verify-password'}\n              label={'Verify Password'}\n              value={verifyPassword}\n              error={!verifyValid}\n              helperText={verifyValid ? '' : 'Password do not match'}\n              placeholder={'Verify Password'}\n              onChange={handleChangeVerifyPassword}\n            />\n          </Grid>\n        }\n      </Grid>\n    </div>\n  )\n}\n\nexport default LoginSignupFormFields","import React, {Dispatch, SetStateAction, useState} from 'react'\nimport './UnauthenticatedPage.css'\nimport {ApplicationUser} from \"../../types/utils\";\nimport LoginSignupButtons from \"./LoginSignupButtons\";\nimport LoginPanelHeader from \"./LoginPanelHeader\";\nimport LoginSignupFormFields from \"./LoginSignupFormFields\";\nimport {getUser, hashPassword, postUser} from \"../../utils/mongoUtils\";\n\nexport type FormState = 'login' | 'signup'\n\ntype UnauthenticatedPageProps = {\n  setAppUser: Dispatch<SetStateAction<ApplicationUser | undefined>>\n}\n\nconst UnauthenticatedPage: React.FC<UnauthenticatedPageProps> = ({setAppUser}) => {\n  \n  const [formState, setFormState] = useState<FormState>('login')\n  const [userName, setUserName] = useState<string>('')\n  const [password, setPassword] = useState<string>('')\n  const [verifyPassword, setVerifyPassword] = useState<string>('')\n  \n  const clearFields = () => {\n    setUserName('')\n    setPassword('')\n    setVerifyPassword('')\n  }\n  \n  const attemptSignup = () => {\n    if (userName && password) {\n      getUser(userName)\n        .then(response => {\n          return response.users.length > 0\n        })\n        .then(userExists => {\n          if (!userExists) {\n            postUser(userName, password)\n              .then(response => {\n                console.log(response)\n              })\n            setAppUser({userName})\n          } else {\n            clearFields()\n          }\n        })\n    }\n    return true\n  }\n  \n  const attemptLogin = () => {\n    getUser(userName)\n      .then(response => {\n        return [response.users.length > 0, response.users]\n      })\n      .then(([userExists, users]) => {\n        if (userExists){\n          if (hashPassword(userName, password) === users[0].passwordHash){\n            setAppUser({userName})\n          } else {\n            clearFields()\n          }\n        } else {\n          clearFields()\n        }\n      })\n  }\n  \n  const handleSubmit = () => {\n    if (formState === 'login') {\n      return attemptLogin()\n    } else {\n      return attemptSignup()\n    }\n  }\n  \n  const userNameValid = userName?.match(/^[A-Za-z]\\w{5,25}$/) !== null\n  const passwordValid = password?.match(/^[A-Za-z]\\w{5,25}$/) !== null\n  const verifyValid = password === verifyPassword\n  \n  const userNamePasswordComplete = userNameValid && passwordValid\n  \n  return (\n    <div className={'pageBackground'}>\n      <div className={'loginSignupForm'}>\n        <LoginPanelHeader/>\n        <LoginSignupFormFields\n          userName={userName}\n          password={password}\n          verifyPassword={verifyPassword}\n          userNameValid={userNameValid}\n          passwordValid={passwordValid}\n          verifyValid={verifyValid}\n          setUserName={setUserName}\n          setPassword={setPassword}\n          setVerifyPassword={setVerifyPassword}\n          formState={formState}\n        />\n        <LoginSignupButtons\n          submitEnabled={\n            formState === 'login'\n              ? userNamePasswordComplete\n              : userNamePasswordComplete && verifyValid\n          }\n          formState={formState}\n          setFormState={setFormState}\n          handleSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default UnauthenticatedPage","import React, {useState} from 'react';\nimport './App.css';\nimport {ApplicationUser } from \"../types/utils\";\nimport {useFetchUserData} from \"../hooks/useFetchUserData\";\nimport AuthenticatedPage from \"./AuthenticatedPage\";\nimport UnauthenticatedPage from \"./UnauthenticatedPage/UnauthenticatedPage\";\n\nfunction App() {\n  \n  const [appUser, setAppUser] = useState<ApplicationUser>()\n  const {data} = useFetchUserData(appUser)\n  \n  return (\n    <div className={'App'}>\n      {\n        data?.isAuthenticated\n          ? <AuthenticatedPage/>\n          : <UnauthenticatedPage setAppUser={setAppUser}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport {QueryClient, QueryClientProvider} from \"react-query\";\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App/>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}